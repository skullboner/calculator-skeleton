// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var $$String    = require("bs-platform/lib/js/string.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("Button");

function make(display, action, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("button", {
                  style: {
                    width: "60px"
                  },
                  onClick: action
                }, display);
    });
  return newrecord;
}

var Button = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.statelessComponent("Display");

function make$1(value, _) {
  var newrecord = component$1.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("p", undefined, value);
    });
  return newrecord;
}

var Display = /* module */[
  /* component */component$1,
  /* make */make$1
];

var component$2 = ReasonReact.reducerComponent("App");

function initialState() {
  return /* record */[
          /* displayValue */"0",
          /* currentOperator : None */0,
          /* currentState : None */0,
          /* previousState : None */0
        ];
}

function displayFloat($$float) {
  var string = Pervasives.string_of_float($$float);
  var length = string.length;
  if (Caml_string.get(string, length - 1 | 0) === /* "." */46) {
    return $$String.sub(string, 0, length - 1 | 0);
  } else {
    return string;
  }
}

function floatOfValueState(valueState) {
  if (valueState) {
    var match = valueState[0];
    return (
            match[/* negative */2] !== 0 ? -1.0 : 1.0
          ) * Caml_format.caml_float_of_string(match[/* currentValue */0]);
  } else {
    return 0.0;
  }
}

function stringOfValueState(valueState) {
  if (valueState) {
    var match = valueState[0];
    return (
            match[/* negative */2] !== 0 ? "-" : ""
          ) + match[/* currentValue */0];
  } else {
    return "0";
  }
}

function calculateValue(state) {
  var currentFloat = floatOfValueState(state[/* currentState */2]);
  var match = state[/* previousState */3];
  var previousState = match ? match[0] : currentFloat;
  var match$1 = state[/* currentOperator */1];
  if (match$1) {
    switch (match$1[0]) {
      case 0 : 
          return previousState / currentFloat;
      case 1 : 
          return previousState * currentFloat;
      case 2 : 
          return previousState + currentFloat;
      case 3 : 
          return previousState - currentFloat;
      
    }
  } else {
    return currentFloat;
  }
}

function reducer(action, state) {
  if (typeof action === "number") {
    switch (action) {
      case 0 : 
          var currentState = state[/* currentState */2];
          var currentState$1;
          if (currentState) {
            var match = currentState[0];
            currentState$1 = match[/* hasDecimal */1] !== 0 ? currentState : /* Some */[/* record */[
                  /* currentValue */match[/* currentValue */0] + ".",
                  /* hasDecimal : true */1,
                  /* negative */match[/* negative */2]
                ]];
          } else {
            currentState$1 = /* Some */[/* record */[
                /* currentValue */"0.",
                /* hasDecimal : true */1,
                /* negative : false */0
              ]];
          }
          var displayValue = stringOfValueState(currentState$1);
          return /* Update */Block.__(0, [/* record */[
                      /* displayValue */displayValue,
                      /* currentOperator */state[/* currentOperator */1],
                      /* currentState */currentState$1,
                      /* previousState */state[/* previousState */3]
                    ]]);
      case 1 : 
          var match$1 = state[/* currentState */2];
          if (match$1) {
            var previousState = calculateValue(state);
            return /* Update */Block.__(0, [/* record */[
                        /* displayValue */displayFloat(previousState),
                        /* currentOperator : None */0,
                        /* currentState : None */0,
                        /* previousState : None */0
                      ]]);
          } else {
            return /* NoUpdate */0;
          }
          break;
      case 2 : 
          var match$2 = state[/* currentState */2];
          var newState = match$2 ? /* record */[
              /* displayValue */"0",
              /* currentOperator */state[/* currentOperator */1],
              /* currentState : None */0,
              /* previousState */state[/* previousState */3]
            ] : /* record */[
              /* displayValue */"0",
              /* currentOperator : None */0,
              /* currentState : None */0,
              /* previousState : None */0
            ];
          return /* Update */Block.__(0, [newState]);
      case 3 : 
          var match$3 = state[/* currentState */2];
          if (match$3) {
            var currentState$2 = match$3[0];
            var match$4 = currentState$2[/* negative */2];
            var currentState$3 = /* Some */[/* record */[
                /* currentValue */currentState$2[/* currentValue */0],
                /* hasDecimal */currentState$2[/* hasDecimal */1],
                /* negative */match$4 !== 0 ? /* false */0 : /* true */1
              ]];
            return /* Update */Block.__(0, [/* record */[
                        /* displayValue */stringOfValueState(currentState$3),
                        /* currentOperator */state[/* currentOperator */1],
                        /* currentState */currentState$3,
                        /* previousState */state[/* previousState */3]
                      ]]);
          } else {
            return /* NoUpdate */0;
          }
          break;
      case 4 : 
          var previousState$1 = calculateValue(state) / 100.0;
          return /* Update */Block.__(0, [/* record */[
                      /* displayValue */displayFloat(previousState$1),
                      /* currentOperator */state[/* currentOperator */1],
                      /* currentState : None */0,
                      /* previousState : Some */[previousState$1]
                    ]]);
      
    }
  } else if (action.tag) {
    var currentOperator = /* Some */[action[0]];
    var match$5 = state[/* currentState */2];
    var match$6;
    if (match$5) {
      var value = calculateValue(state);
      match$6 = /* tuple */[
        displayFloat(value),
        /* Some */[value]
      ];
    } else {
      match$6 = /* tuple */[
        state[/* displayValue */0],
        state[/* previousState */3]
      ];
    }
    return /* Update */Block.__(0, [/* record */[
                /* displayValue */match$6[0],
                /* currentOperator */currentOperator,
                /* currentState : None */0,
                /* previousState */match$6[1]
              ]]);
  } else {
    var $$char = action[0];
    var match$7 = state[/* currentState */2];
    var currentState$4;
    if (match$7) {
      var match$8 = match$7[0];
      currentState$4 = /* Some */[/* record */[
          /* currentValue */match$8[/* currentValue */0] + $$String.make(1, $$char),
          /* hasDecimal */match$8[/* hasDecimal */1],
          /* negative */match$8[/* negative */2]
        ]];
    } else {
      currentState$4 = $$char !== 48 ? /* Some */[/* record */[
            /* currentValue */$$String.make(1, $$char),
            /* hasDecimal : false */0,
            /* negative : false */0
          ]] : /* None */0;
    }
    var displayValue$1 = stringOfValueState(currentState$4);
    return /* Update */Block.__(0, [/* record */[
                /* displayValue */displayValue$1,
                /* currentOperator */state[/* currentOperator */1],
                /* currentState */currentState$4,
                /* previousState */state[/* previousState */3]
              ]]);
  }
}

function createButton(reduce, display, action) {
  return ReasonReact.element(/* None */0, /* None */0, make(display, Curry._1(reduce, (function () {
                        return action;
                      })), /* array */[]));
}

function make$2() {
  var newrecord = component$2.slice();
  newrecord[/* render */9] = (function (param) {
      var match = param[/* state */2];
      var reduce = param[/* reduce */1];
      var clearDisplay = match[/* currentState */2] ? "C" : "AC";
      return React.createElement("div", undefined, React.createElement("table", undefined, React.createElement("tbody", undefined, React.createElement("tr", undefined, React.createElement("td", {
                                  colSpan: 4
                                }, ReasonReact.element(/* None */0, /* None */0, make$1(match[/* displayValue */0], /* array */[])))), React.createElement("tr", undefined, React.createElement("td", undefined, createButton(reduce, clearDisplay, /* Clear */2)), React.createElement("td", undefined, createButton(reduce, "+/-", /* PlusMinus */3)), React.createElement("td", undefined, createButton(reduce, "%", /* Percentage */4)), React.createElement("td", undefined, createButton(reduce, "/", /* Operation */Block.__(1, [/* Divide */0])))), React.createElement("tr", undefined, React.createElement("td", undefined, createButton(reduce, "7", /* NumberPart */Block.__(0, [/* "7" */55]))), React.createElement("td", undefined, createButton(reduce, "8", /* NumberPart */Block.__(0, [/* "8" */56]))), React.createElement("td", undefined, createButton(reduce, "9", /* NumberPart */Block.__(0, [/* "9" */57]))), React.createElement("td", undefined, createButton(reduce, "*", /* Operation */Block.__(1, [/* Multiply */1])))), React.createElement("tr", undefined, React.createElement("td", undefined, createButton(reduce, "4", /* NumberPart */Block.__(0, [/* "4" */52]))), React.createElement("td", undefined, createButton(reduce, "5", /* NumberPart */Block.__(0, [/* "5" */53]))), React.createElement("td", undefined, createButton(reduce, "6", /* NumberPart */Block.__(0, [/* "6" */54]))), React.createElement("td", undefined, createButton(reduce, "+", /* Operation */Block.__(1, [/* Plus */2])))), React.createElement("tr", undefined, React.createElement("td", undefined, createButton(reduce, "1", /* NumberPart */Block.__(0, [/* "1" */49]))), React.createElement("td", undefined, createButton(reduce, "2", /* NumberPart */Block.__(0, [/* "2" */50]))), React.createElement("td", undefined, createButton(reduce, "3", /* NumberPart */Block.__(0, [/* "3" */51]))), React.createElement("td", undefined, createButton(reduce, "-", /* Operation */Block.__(1, [/* Minus */3])))), React.createElement("tr", undefined, React.createElement("td", {
                                  colSpan: 2
                                }, createButton(reduce, "0", /* NumberPart */Block.__(0, [/* "0" */48]))), React.createElement("td", undefined, createButton(reduce, ".", /* Decimal */0)), React.createElement("td", undefined, createButton(reduce, "=", /* Equals */1))))));
    });
  newrecord[/* initialState */10] = initialState;
  newrecord[/* reducer */12] = reducer;
  return newrecord;
}

exports.Button             = Button;
exports.Display            = Display;
exports.component          = component$2;
exports.initialState       = initialState;
exports.displayFloat       = displayFloat;
exports.floatOfValueState  = floatOfValueState;
exports.stringOfValueState = stringOfValueState;
exports.calculateValue     = calculateValue;
exports.reducer            = reducer;
exports.createButton       = createButton;
exports.make               = make$2;
/* component Not a pure module */
